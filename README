# LiteRadar Leaflet mini tracker, MIT (c) 2019-2023 miktim@mail.ru

DRAFT VERSION!

Tracker is designed to visualize tracked objects or your own location. Interaction with the tracker is carried out by exchanging messages in JSON format via WebView, WebSocket or using the JavaScript API.

Run demo (the wonderful ideal world): 
  https://miktim.github.io/literadar-mini-tracker/tracker?mode=demo&track=15:30

Track your own location:
  https://miktim.github.io/literadar-mini-tracker/tracker?mode=watch&watch=5

Tracker html URL query parameters (optional):
  mode  (mode=nowatch)
    debug   - debug source;
    watch   - watch own location;
    nowatch - disable watching own location;
    demo    - run demo.

  watch (watch=5)
    watch = timeout for monitoring own location (seconds)

  track (track=7:20:1000) minimizing track nodes
    track = deviation(degrees):minDistance(meters):maxDistance(meters)

  lang (browser defaults or lang=en_US)
    Supported: en_US, ru_RU

  websocket (websocket=undefined)
    websocket = WebSocketURI
    Note: WebSocket protocol depends on page protocol: http - ws,  https - wss.

Tracker objects:

  SourceLocation object:
    Properties:
      {  id: <String>,     // required, 'transponder' unique id
         name: <String>,   // required, 'transponder' name
         iconid: <Number>, // optional, (0 : 4) gray, blue, green, red, yellow
         latitude: <Number>,  // required, latitude WGS-84 (-90 : 90)
         longitude: <Number>, // required, longitude WGS-84 (-180 : 180)
         accuracy: <Number>,  // required, meters (radius!)
         speed: <Number>,   // optional, meters per second
         heading: <Number>, // optional, degrees (0 : 360)
         timestamp: <Number>, // required, EpochTimeStamp in milliseconds,
         timeout: <Number>    // optional, location 'lifetime' in SECONDS
      }

  Message object:
    Properties:
      {  message: <String> // required, user message
      }

  Action:
      {
         action: <String>, //
         actionObj: <TrackerObject>
      }

  Error object:
    Properties:
       {
          type: <String>,
          code: <Number>,
          message: <String>,
          trackerObj: <TrackerObject>
       }

  Actions <String>:
    source:update
    message:update

  Event:
      {
         event: <String>, //
         eventObj: <TrackerObject>
      }
  
  Events <String>:
    source:error


Webview tracker entries:
    tracker.webview.toTracker(<Action>);
    tracker.webview.fromTracker(<Event>);

Exchange via WebSocket is similar. 

The tracker broadcasts location events in the watch mode.

Java Script tracker API:

    tracker.load(mapid, options); // init tracker
    tracker.whenReady(handler); // wait for load tracker modules
    tracker.getMap(); // returns Leaflet map object
    tracker.SourceLocation({properties}); // returns a new source location object
    tracker.Message(message <String>); // returns a new message object
    tracker.on(event, handler);

    SourceLocation object methods:
      <LatLng> getLatLng() // get Leaflet-style location 
      <Position> getPosition() // get Yandex.Maps-style location
      setLatLng(<LatLng>) // set Leaflet-style location 
      setPosition(<Position>) // set Yandex.Maps-style location
      update() // show location on the tracker map

Leaflet-style location <LatLng> is an object {lat: latitude, lng: longitude}.
Yandex.Maps-style location <Position> is an array [latitude, longitude]

    Message object methods:
      update(); // show message on the tracker map

    Modules:
      tracker.geoUtil // Geodetical functions
        Functions:
          <Number> distance(loc1<Location>, loc2<Location>);
          <Number> heading(fromLoc<Location>, toLoc<Location>);
          <Location> radialPoint(loc<Location>,heading<Number>, distance<Number>);
<Location> is <LatLng> or <Position>

      tracker.util
        <object> update(obj1 <object>, obj2 <object>); // update obj1 from obj2
        <object> extend(obj1 <object>, obj2 <object>); // extend obj1 from obj2
        <object> merge(obj1 <object>, obj2 <object>); // update and extend obj1 from obj2
        <DOMElement> createDOMElement(tagName<String>, className<String>, container<DOMElement>);